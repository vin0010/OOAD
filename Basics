#This file contains my observations and notes about OOAD.


Learnings from https://www.pluralsight.com/courses/java-fundamentals-object-oriented-design

Simplicity
    The code should do exactly what's necessary, nothing more

For any problem, go for simpler solution, if it needs to be modified in some time again, go for a better design pattern since it will have make further modification easier(Fool me once, shame on you, fool me twice shame on me)

Using Design patterns in every place is not a good idea, use it in places where you are going to modify code more than once.

Design incrementally, Build incrementally(imagine constructing multiple houses in apartment, dont go for painting in the first place after finishing the one side wall).

Cohesion/coherence and coupling :
    Cohesion : All public methods of a class form a cohesive group. They should be related to each other, no random methods should be grouped to form a class
    Coupling : If one global variable is used by two objects, changing it in one place might affect other place too, avoid coupling as much as possible. Lot of things can go wrong when there are too much coupling in programming.
    Idea is to isolate the objects as much as possible to make it easier to maintain.
    Conclusion : Maximize Cohesion, minimize Coupling
    If tightly coupled, change becomes hard

    Whenever you call one class from another class there is a potential cohesion problem, think deeply about it before moving.


    Orthogonal(ity) : two things are orthogonal when changing one doesnt impact another

Object should be like a black box, it should never expose whats its doing inside, you can only ask for help.

All fields of a class should be private

Fragile base classes
    Classes should be designed such a way that its change shouldn't affect its child in any way.
    These kind of bugs are very hard to find and they show up exactly at runtime(at least use interfaces whenever you need extends).
    Whenever possible stop using extends and go for implements. Also to make sure classes are not extended by some one, start using final for class declarations.
    If you feel its dangerous to extend classes, make it final, if its necessary and some overriding some of the methods seems risky, make methods final so it cannot be overridden.



Data abstraction(implementation hiding)
    We do not know how objects works but we do know how to ask it to do something for us

Single responsibility
    Object should be responsible for only one thing

Delegation:
    Don't get the data, ask the object that has the data to do the work for you.



Getters and Setters are evil
    They reveal too much information about your object work,

Is-A relationship
    If you feel A is B then A can extend B
    Is a relationship make sense in english, but it doesnt necessairly make sense in java.
    Make sure you think deep about all situations before making a class child of something.

Template method pattern
    Do most of the work in super class and let sub classes do their custom work.
    If some of the customization follows a pattern, keep an public method which uses abstract method inside super class and let others use it,
    when sub classes extend super class they should implement that abstact method as well.
       Example
        abstract Worker
            public pay(){
                Money m = getAmountDue(); // super class can talk to subclass without 'directly' talking
                pay m;
            }
            abstact Money getAmountDue()
        Employee extends Worker:
            public Money getAmount due()
        Contractor extends Worker:
            public Money getAmount due()


Protected
    the reason protected exist is for template methods

Defining contract with interfaces
    interface segregation principle
        You should split up your interfaces such a way that you never have to implement something you can't.
            Example
                Worker(has pay() method) implemented by Employee and Contractor because both needs pa method.
                The same cannot be done for volunteer since he shouldn't have pay method and you shouldn't throw not implemented exception.

    Static class inside interfaces help us do extend default implementations
        https://github.com/vin0010/OOAD/tree/master/src/com/codex/solid/defaultimplementation

Default implementation(see above)
    1. Interface subclass level - https://github.com/vin0010/OOAD/tree/master/src/com/codex/solid/defaultimplementation
    2. delegate level - https://github.com/vin0010/OOAD/blob/master/src/com/codex/solid/defaultimplementation/AnotherEmployee.java

If you find yourself being forced to implement a method which you dot want and throw an exception, then its a bad design.


You should be able to radically change the implementation of a class without impacting its clients.
    If my class is completely stand alone thing, I can change it the it work at any time.
    How to think in such a way that objects are loosely coupled?
        How to write my system such a way that the above principle is followed properly? How to do this constant check?
        Objects are like two spies are passing message in a park bench without seeing each other. One put the paper other take it and move away but never worried about who sends the message.
        Even in future if the spy changes, another one will never care and only care about message and walk away.
        To top it, changing classes shouldn't affect test cases as well.
        If the change you made broke tests not related to your change, there is a serious functionality break to look out for.

        Think and add my thoughts here.

Nouns are great names for Classes
adjectives are great names for interfaces
LSP(Liskov Substitute principle)
    Subtypes must be substitutes for their base types

Dependency inversion is different from dependency injection

Dependency inversion:
    Dependency should be in proper direction
    https://github.com/vin0010/OOAD/tree/master/src/com/codex/solid/depenencyinversion
    Whenever a class depends on(interacts with) only one object, its going to be difficult when another similar class introduced.
    So its better to introduce dependency inversion and create a interface which is extended by that object and make a generic call to that object.
    So dependency is reversed and maintance and changes required are less when new classes introduced as well.

Ball and socket notation:
    ObjA -----------------------O)------------------------ObjB
                               ObjInterface
    Means ObjA is talking to ObjeB via ObjInterface
    Payable - interface
        Extended by Employee and Contractors and Vendors
    AccountsPayable - Singleton class that has a method(paying) to take payable and pay it.
    Inside payable get instance of AccountsPayable and do accountsPayable.paying(this) inside deafult implementation of payable.


Open closed principle
    Class should be Open for extension and closed for modification
    Capabilities can be added to a class and should be closed for behavioral change.

    Builder:
        Delegate the work of building to some one else.

How to avoid getters and Setters
    If you use getters and setters, its very difficult to maintain the code when something changes.
    More usage of getters and setters leads to disaster.
    dog.getBody().gettail().wag();
        In other words, when it comes to
    if any of the method response is null or wrong, like a train wreck, everything else that precedes that will also break.

Dependency injection
    Finding how our objects interacting outside is easy, testing how our object using inside objects are difficult.
    To solve this problem reverse the injection of objects are going to be the key.

    In another perspective, when we do test driven development, its hard to manipulate things that happens inside a method.
    Say for example a method named add create an object for Adder which requires DB connection object. For outsider we send two parameters without knowing its going to do DB operations inside.
    So when we write test cases, its going to fail for sure.
    By injecting related/required objects to our class constructor, we know exactly what are the objects to be mocked when we write test cases.
    This is also helpful in mocking the code

Summary
    Four Golden rules for great code
    1. Objects are defined by what they do, not what they contain
    2. Must be able to replace the implementation without impacting the clients at any point of time
        (Scope of change should be limited to one place)
    3. Ask for help not for information(Delegation, we dont have to worry about getters and setters)
    4. Prefer implements rather than extends

TODO
    Think how to implement what I have learnt
    bob martin clean code
    see https://leetcode.com/problems/two-sum/discuss/3/Accepted-Java-O(n)-Solution
    Difference between protected and private methods and when to use them
    Broad leaf commerce
    sprint features
    Understand the difference between unit test and integration tests
